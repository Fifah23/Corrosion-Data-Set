import torch
import torch.nn as nn
import torch.nn.functional as F

# Define convolutional block
class Conv(nn.Module):
    def __init__(self, in_channels, out_channels, kernel_size, stride, padding=None):
        super().__init__()
        padding = (kernel_size // 2) if padding is None else padding
        self.conv = nn.Conv2d(in_channels, out_channels, kernel_size, stride, padding, bias=False)
        self.bn = nn.BatchNorm2d(out_channels)
        self.act = nn.ReLU()

    def forward(self, x):
        return self.act(self.bn(self.conv(x)))

# Define C2f block (similar to CSP block)
class C2f(nn.Module):
    def __init__(self, in_channels, num_blocks, shortcut=True):
        super().__init__()
        hidden_channels = int(in_channels * 0.25)  # Scale type n: width multiplier 0.25
        self.conv1 = Conv(in_channels, hidden_channels, kernel_size=1, stride=1)
        self.blocks = nn.Sequential(*[Conv(hidden_channels, hidden_channels, kernel_size=3, stride=1) for _ in range(num_blocks)])
        self.shortcut = shortcut
        self.conv2 = Conv(hidden_channels * (2 if shortcut else 1), in_channels, kernel_size=1, stride=1)

    def forward(self, x):
        y1 = self.conv1(x)
        y2 = self.blocks(y1)
        return self.conv2(torch.cat((x, y2), dim=1) if self.shortcut else y2)

# Define SPPF (Spatial Pyramid Pooling - Fast)
class SPPF(nn.Module):
    def __init__(self, in_channels, kernel_size):
        super().__init__()
        self.conv1 = Conv(in_channels, in_channels // 2, kernel_size=1, stride=1)
        self.pool = nn.MaxPool2d(kernel_size, stride=1, padding=kernel_size // 2)
        self.conv2 = Conv(in_channels * 2, in_channels, kernel_size=1, stride=1)

    def forward(self, x):
        y1 = self.conv1(x)
        y2 = self.pool(y1)
        return self.conv2(torch.cat((y1, y2), dim=1))

# YOLOv8 segmentation model
class YOLOv8SegP6(nn.Module):
    def __init__(self, nc=80, depth_multiplier=0.33):
        super().__init__()
        
        def calc_repeats(base_repeats):
            return max(1, round(base_repeats * depth_multiplier))
        
        # Backbone
        self.backbone = nn.ModuleList([
            Conv(3, 64, 3, 2), # P1/2
            Conv(64, 128, 3, 2), # P2/4
            C2f(128, calc_repeats(3)),
            Conv(128, 256, 3, 2), # P3/8
            C2f(256, calc_repeats(6)),
            Conv(256, 512, 3, 2), # P4/16
            C2f(512, calc_repeats(6)),
            Conv(512, 768, 3, 2), # P5/32
            C2f(768, calc_repeats(3)),
            Conv(768, 1024, 3, 2), # P6/64
            C2f(1024, calc_repeats(3)),
            SPPF(1024, 5)
        ])

        # Head
        self.head = nn.ModuleList([
            nn.Upsample(scale_factor=2, mode='nearest'),
            Conv(1024 + 768, 768, 3, 1),
            nn.Upsample(scale_factor=2, mode='nearest'),
            Conv(768 + 512, 512, 3, 1),
            nn.Upsample(scale_factor=2, mode='nearest'),
            Conv(512 + 256, 256, 3, 1),
            Conv(256, 256, 3, 2),
            Conv(256 + 512, 512, 3, 1),
            Conv(512, 512, 3, 2),
            Conv(512 + 768, 768, 3, 1),
            Conv(768, 768, 3, 2),
            Conv(768 + 1024, 1024, 3, 1),
        ])

        self.segmentation = nn.Conv2d(256, nc, kernel_size=1)

    def forward(self, x):
        # Backbone forward pass
        features = []
        for layer in self.backbone:
            x = layer(x)
            features.append(x)

        # Head forward pass
        p6 = features[-1]
        x = self.head[0](p6)
        x = self.head[1](torch.cat((x, features[8]), dim=1))
        x = self.head[2](x)
        x = self.head[3](torch.cat((x, features[6]), dim=1))
        x = self.head[4](x)
        x = self.head[5](torch.cat((x, features[4]), dim=1))

        # Segmentation output
        return self.segmentation(x)

# Instantiate the model
model = YOLOv8SegP6(nc=80, depth_multiplier=0.33)

# Example usage
x = torch.randn(1, 3, 640, 640)  # Dummy input
output = model(x)
print(output.shape)
